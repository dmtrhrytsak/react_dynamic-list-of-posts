{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","selectPost","className","map","id","userId","title","type","onClick","request","url","a","fetch","response","ok","Error","status","statusText","json","getPostComments","postId","getPostDetails","nanoid","customAlphabet","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","Number","value","placeholder","onChange","target","required","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isCommentsShown","setIsCommentsShown","useEffect","fetchPostDetils","details","console","error","fetchPostComments","comments","Promise","all","length","commentIdToRemove","filter","comment","newComment","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","fetchUsers","usersFromServer","fetchPosts","postsFromServer","fetchUserPosts","userPosts","htmlFor","newSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.caffd875.chunk.js","sourcesContent":["import { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: Post['id'];\n  selectPost: (newSelectedPostId: Post['id']) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  selectPost,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts?.map(({ id, userId, title }) => (\n          <>\n            <div>\n              <li key={id} className=\"PostsList__item\">\n                <b>{`[User #${userId}]: `}</b>\n                {title}\n              </li>\n            </div>\n\n            {selectedPostId === id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selectPost(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selectPost(id)}\n              >\n                Open\n              </button>\n            )}\n          </>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async <T>(url: string): Promise<T> => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { request } from './api';\n\nexport const getPostComments = (postId: Post['id']) => request<Comment[]>(`/comments?postId=${postId}`);\n","import { Post } from '../types/Post';\nimport { request } from './api';\n\nexport const getAllPosts = () => request<Post[]>('/posts');\nexport const getUserPosts = (userId: Post['userId']) => request<Post[]>(`/posts?userId=${userId}`);\nexport const getPostDetails = (postId: Post['id']) => request<Post>(`/posts/${postId}`);\n","import { useState } from 'react';\nimport { customAlphabet } from 'nanoid';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport './NewCommentForm.scss';\n\nconst nanoid = customAlphabet('1234567890', 10);\n\ntype Props = {\n  postId: Post['id'];\n  addComment: (newComment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState<Comment['name']>('');\n  const [email, setEmail] = useState<Comment['email']>('');\n  const [body, setBody] = useState<Comment['body']>('');\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment({\n      id: Number(nanoid()),\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: Post['id'];\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [isCommentsShown, setIsCommentsShown] = useState(true);\n\n  useEffect(() => {\n    const fetchPostDetils = async () => {\n      try {\n        const details: Post = await getPostDetails(postId);\n\n        setPostDetails(details);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching posts');\n      }\n    };\n\n    const fetchPostComments = async () => {\n      try {\n        const comments: Comment[] = await getPostComments(postId);\n\n        setPostComments(comments);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching post comments');\n      }\n    };\n\n    Promise.all([fetchPostDetils(), fetchPostComments()]);\n  }, [postId]);\n\n  const removeComment = (commentIdToRemove: Comment['id']) => {\n    if (!postComments) {\n      return;\n    }\n\n    setPostComments(\n      postComments.filter((comment) => comment.id !== commentIdToRemove),\n    );\n  };\n\n  const addComment = (newComment: Comment) => {\n    if (!postComments) {\n      return;\n    }\n\n    setPostComments([...postComments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.title}</p>\n      </section>\n\n      {postComments && (\n        <section className=\"PostDetails__comments\">\n          {postComments.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentsShown(!isCommentsShown)}\n            >\n              {`${isCommentsShown ? 'Hide' : 'Show'} ${\n                postComments.length\n              } comments`}\n            </button>\n          )}\n\n          {isCommentsShown && (\n            <ul className=\"PostDetails__list\">\n              {postComments?.map(({ id, body }) => (\n                <li key={id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(id)}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} addComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<User['id']>(0);\n  const [selectedPostId, setSelectedPostId] = useState<Post['id']>(0);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersFromServer: User[] = await getAllUsers();\n\n        setUsers(usersFromServer);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('An error has occurred when fetching useres');\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const postsFromServer: Post[] = await getAllPosts();\n\n      setPosts(postsFromServer);\n    };\n\n    const fetchUserPosts = async () => {\n      const userPosts = await getUserPosts(selectedUserId);\n\n      setPosts(userPosts);\n    };\n\n    try {\n      (selectedUserId === 0 ? fetchPosts : fetchUserPosts)();\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('An error has occurred when fetching posts');\n    }\n  }, [selectedUserId]);\n\n  const selectPost = (newSelectedPostId: Post['id']) => {\n    setSelectedPostId(newSelectedPostId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"userSelect\">\n          Select a user: &nbsp;\n          <select\n            value={selectedUserId}\n            id=\"userSelect\"\n            className=\"App__user-selector\"\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users?.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts && (\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              selectPost={selectPost}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\nimport { request } from './api';\n\nexport const getAllUsers = () => request<User[]>('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}